diff <- function(x,y)
{
return(x/y) #Try also x+y
}
TheLine <- function(x1,y1,slp,d)
{
z = slope*(d-x1)+y1
return(z)
}
x = seq(-20,20,0.5)
y = seq(-20,20,0.5)
f = c(-5,5)
h = c(-5,5)
plot(f,h,main="Slope field")
for(j in x)
{
for(k in y)
{
slope = diff(j,k)
domain = seq(j-0.07,j+0.07,0.14)
z = TheLine(j,k,slope,domain)
arrows(domain[1],z[1],domain[2],z[2],length=0.08)
}
}
require(grDevices) # for colours
filled.contour(volcano, color = terrain.colors, asp = 1) # simple
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
# Annotating a filled contour plot
a <- expand.grid(1:20, 1:20)
b <- matrix(a[,1] + a[,2], 20)
filled.contour(x = 1:20, y = 1:20, z = b,
plot.axes = { axis(1); axis(2); points(10, 10) })
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)), axes = FALSE)
## rather, the key *should* be labeled:
filled.contour(cos(r^2)*exp(-r/(2*pi)), frame.plot = FALSE,
plot.axes = {})
require(grDevices) # for colours
filled.contour(volcano, color = terrain.colors, asp = 1) # simple
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
# Annotating a filled contour plot
a <- expand.grid(1:20, 1:20)
b <- matrix(a[,1] + a[,2], 20)
filled.contour(x = 1:20, y = 1:20, z = b,
plot.axes = { axis(1); axis(2); points(10, 10) })
f <- function(x, y) x^2 - y^2
xx <- c(-1, 1); yy <- c(-1, 1)
## Not run:
vectorfield(f, xx, yy, scale = 0.1)
for (xs in seq(-1, 1, by = 0.25)) {
sol <- rk4(f, -1, 1, xs, 100)
lines(sol$x, sol$y, col="darkgreen")
}
grid()
## End(Not run)
library(oce)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE,
type=2)
install.packages("oce")
library(oce)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE,
type=2)
#################### Program to create the soils File in PIHM from Data in SSurgo and other resources##################
################# Felipe Montes ##########################
################# 2015 11 13 ############################
########### Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/R_Library/library")    ;
########### Call the library packages needed for the program to work #############
library(rgdal);
library(sp);
library(RColorBrewer) ;
library(lattice) ;
library(ggplot2)  ;
library(rgeos)   ;
library(tmap) ;
library(dplyr)  ;
library(tidyr)  ;
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
getwd()
Att<-read.table("C:\\Users\\frm10\\Desktop\\WE38.att",header=T, as.is=T)
head(Att)
Att$LAI<-0
head(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE382.att", quote=F ,sep="\t")
head(Att)
View(Att)
View(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE382.att", quote=F ,sep="\t")
Att<-read.table("C:\\Users\\frm10\\Desktop\\WE38.att",header=T, as.is=T)
head(Att)
Att$LAI<-0
head(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE382.att", quote=F ,sep="\t")
tail(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE38_3.att", quote=F ,sep="\t")
Att<-read.table("C:\\Users\\frm10\\Desktop\\WE38.att",header=T, as.is=T)
head(Att)
Att$LAI<-c(0)
head(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE38_2.att", quote=F ,sep="\t")
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE38_2.att", quote=F ,sep="\t", row.names = F)
find_rtools()
library(devtools)
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
library(devtools)
find_rtools()
system(paste(getwd(),"tob32 -a",sep="/"))
system(shQuote("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR>tob32.exe -a 6358.Flux.dat",type="cmd"))
system2("tob32.exe", args=c("-a", "6358.Flux.dat"))
system2("tob32.exe", args=c("-a", "6358.Flux.dat"))
shell("tob32 -a 6358.Flux.dat",NULL)
system(Sys.getenv("COMSPEC"))
system(paste('"c:/Program Files/Mozilla Firefox/firefox.exe"',
'-url cran.r-project.org'), wait = FALSE)
system(getwd(),"dir")
system("dir")
system("notepad myfile.txt")
system(paste0(getwd(),"dir"))
system(paste0(getwd(),"/dir"))
system("C:\\Users\\frm10\\Documents\\dir"))
system("C:\\Users\\frm10\\Documents\\dir")
system("C:\Users\frm10\Documents\dir")
system("C:\\Users\\frm10\\Documents\\dir")
system("C:\\Users\\frm10\\Documents\\")
system("dir")
system("C:\Users\frm10>dir")
system("C:\\Users\\frm10>dir")
find_rtools()
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR>tob32")
system("cd")
ys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
###############################################################################################################
#                          Loading Packages and setting up working directory
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
library("devtools", lib.loc="C:/Felipe/Sotware&Coding/R_Library/library")
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR>tob32.exe -a 6358.Flux.dat")
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR>tob32 -a 6358.Flux.dat")
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR\\tob32 -a 6358.Flux.dat")
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR\\tob32.exe -a 6358.Flux.dat")
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR\\tob32 -a 6358.Flux.dat")
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR\\tob32")
system("cmd.exe", input = "notepad")
system("cmd.exe", input = "tob32")
getwd()
#############################################################################################################################
#
#  Program to read TOB3 binary files from the Campbell Scientific memory cards.
# The TOB3 is a proprietary fromat therefore is ts better to use the tools that Campbell Scientific has already developed
# The Loggernet software utility by Campbell, come with a C program to convert the TOB3 format to other formats.
# its documentation can be found on section B.4 "Converting Binary File Formats" of the Loggernet Manual.
# B.4.5 TOB32.EXE
#
# The TOB32.EXE command line utility is installed by default in the LoggerNet
# program directory at C:\Program Files\Campbellsci\Loggernet\tob32.exe. The
# output is similar to CardConvert. Command line switches are used to determine
# the new file format that will be created. Some of the basic switches available
# are listed below:
#   -h or -? | Help
# -a | ASCII (TOA5) Generates CSI Table Oriented ASCII version 5
# format files
# -b | Binary (TOB1) Generates CSI Table Oriented Binary version 1
# format files
# Some examples using these switches include:
#   tob32.exe -a mydata.dat (converts mydata.dat to TOA5 format)
# tob32.exe -b mydata.dat (converts mydata.dat to TOB1 format)
#
# The idea of calling the Cprogram TOB32.EXE from R came from  Darren Wilkinson's research blog "Calling C code from R" at:
# https://darrenjw.wordpress.com/2010/12/30/calling-c-code-from-r/
#
# Other Sources are:
# https://cran.r-project.org/doc/manuals/r-release/R-exts.html
# http://www.biostat.jhsph.edu/~rpeng/docs/interface.pdf
#
#
#
#  Felipe Montes,  2017/08/02
#
##############################################################################################################################
############################### Record Time To start##########################################################
TimeStart<-Sys.time()  ;
###############################################################################################################
#                          Loading Packages and setting up working directory
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
#  Set Working directory
setwd("C:\\Felipe\\Eddy Covariance System\\RCode") ;
system("cmd.exe", input = "./TOB3toR/tob32")
system("cmd.exe /c dir", intern = T)
#############################################################################################################################
#
#  Program to read TOB3 binary files from the Campbell Scientific memory cards.
# The TOB3 is a proprietary fromat therefore is ts better to use the tools that Campbell Scientific has already developed
# The Loggernet software utility by Campbell, come with a C program to convert the TOB3 format to other formats.
# its documentation can be found on section B.4 "Converting Binary File Formats" of the Loggernet Manual.
# B.4.5 TOB32.EXE
#
# The TOB32.EXE command line utility is installed by default in the LoggerNet
# program directory at C:\Program Files\Campbellsci\Loggernet\tob32.exe. The
# output is similar to CardConvert. Command line switches are used to determine
# the new file format that will be created. Some of the basic switches available
# are listed below:
#   -h or -? | Help
# -a | ASCII (TOA5) Generates CSI Table Oriented ASCII version 5
# format files
# -b | Binary (TOB1) Generates CSI Table Oriented Binary version 1
# format files
# Some examples using these switches include:
#   tob32.exe -a mydata.dat (converts mydata.dat to TOA5 format)
# tob32.exe -b mydata.dat (converts mydata.dat to TOB1 format)
#
# The idea of calling the Cprogram TOB32.EXE from R came from  Darren Wilkinson's research blog "Calling C code from R" at:
# https://darrenjw.wordpress.com/2010/12/30/calling-c-code-from-r/
#
# Other Sources are:
# https://cran.r-project.org/doc/manuals/r-release/R-exts.html
# http://www.biostat.jhsph.edu/~rpeng/docs/interface.pdf
#
#
#
#  Felipe Montes,  2017/08/02
#
##############################################################################################################################
############################### Record Time To start##########################################################
TimeStart<-Sys.time()  ;
###############################################################################################################
#                          Loading Packages and setting up working directory
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
#  Set Working directory
setwd("C:\\Felipe\\Eddy Covariance System\\RCode") ;
###############################################################################################################
#                         Call packages needed to process the data
#
###############################################################################################################
###############################################################################################################
#                        Example from "Calling C code from R"
###############################################################################################################
#   Cprogram
# #include <stdio.h>
# #include <math.h>
# #include <stdlib.h>
# #include <gsl/gsl_rng.h>
# #include <gsl/gsl_randist.h>
#
# int main(int argc, char *argv[])
# {
#   if (argc!=4) {
#     fprintf(stderr,"Usage: %s <Iters> <Thin> <Seed>\n",argv[0]);
#     exit(EXIT_FAILURE);
#   }
#   long N=(long) atoi(argv[1]);
#   long thin=(long) atoi(argv[2]);
#   long seed=(long) atoi(argv[3]);
#   long i,j;
#   gsl_rng *r = gsl_rng_alloc(gsl_rng_mt19937);
#   gsl_rng_set(r,seed);
#   double x=0;
#   double y=0;
#   printf("Iter x y\n");
#   for (i=0;i<N;i++) {
#     for (j=0;j<thin;j++) {
#       x=gsl_ran_gamma(r,3.0,1.0/(y*y+4));
#       y=1.0/(x+1)+gsl_ran_gaussian(r,1.0/sqrt(x+1));
#     }
#     printf("%ld %f %f\n",i,x,y);
#   }
#   exit(EXIT_SUCCESS);
# }
# R code to call the c program
#
# standalone<-function(N=10000,thin=500,
#                      seed=trunc(runif(1)*1e6),
#                      exec=file.path(".","standalone"),
#                      tmpfile=tempfile())
# {
#   command=paste(exec,N,thin,seed,">",tmpfile)
#   system(command)
#   read.table(tmpfile,header=TRUE)
# }
###############################################################################################################
#                        Using TOB32.exe from R
###############################################################################################################
# TOB32.exe
# C:\Program Files (x86)\Campbellsci\LoggerNet>.\tob32 -H
# .\tob32 -H
# v12.00
# Switches:
#   H|Help gives this message
# ?|?    gives this message
# d|DaDisp Sets output file format to DaDisp
# a|ASCII  (TOA5)  Output CSI Table Oriented ASCII version 5 format
# b|binary (TOB1) Output CSI Table Oriented Binary version 1 format
# e|EASE   Output EASE format(not implemented)
# f|check discontinuities, and fill missing floating data with NaN
# with scan_sec &scan_nano inputs
# i|ID2000  Output ID2000 format
# n|notime do not output timestamps on TOA5 output
# m ?| blank: create one output file per file marker,
# 0: don't care,        1: per file mark,
# 2: per removal mark,  3: per either mark
#
# o|create output on specified path
# r|output record number
# s|check discontinuities, and start new files for them
# with scan_sec &scan_nano inputs
# v|verbose output to CSIDebug.log
#
# examples:
# tob32 -d mydata.dat --converts to DaDisp format
# tob32 -a mydata.dat --converts to TOA5 format
# tob32 -b mydata.dat --converts to TOB1 format
# tob32 -f 0;0 -b mydata.dat --TOB1 format with discontinuities check
# tob32 -i mydata.dat --converts to ID2000 format
# tob32 -a -o d:\outpath\  mydata.dat --converts "mydata.dat",
# to TOA5 format, in directory \outputpath\
shell("dir",intern=T)
shell("cd TOB3intoR")
getwd()
shell("./TOB3intoR/tob32")
shell("./TOB3intoR/tob32", intern = T)
shell("./TOB3intoR tob32", intern = T)
shell("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR tob32", intern = T)
library(devtools)
shell("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR tob32", intern = T)
shell("pwd", intern=T)
shell("path", intern=T)
shell("cmd", intern=T)
shell("cd", intern=T)
setwd("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR") ;
shell("cd", intern=T)
shell("tob32", intern=T)
shell("tob32.exe", intern=T)
shell("tob32.exe -a -o 6358.Flux.dat 6358.Flux.TOA5", intern=T)
shell("tob32.exe -a -o ./6358.Flux.TOA5 6358.Flux.dat", intern=T)
shell("tob32.exe -a -o ./6358.Flux.TOA5 6358.Flux.dat", intern=T)
system2("tob32.exe -a -o ./6358.Flux.TOA5 6358.Flux.dat")
system("tob32.exe -a -o ./6358.Flux.TOA5 6358.Flux.dat")
system("tob32.exe -a -o ./6358.Flux.TOA5 6358.Flux.dat")
list.dir("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow\WillowOpenPathEddyCovarianceData", recursive=T)
list.dir("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow\\WillowOpenPathEddyCovarianceData", recursive=T)
list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow\\WillowOpenPathEddyCovarianceData", recursive=T)
list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow", recursive=T)
str(list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow", recursive=T))
list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe
\\2017\\Willow\\WillowOpenPathEddyCovarianceData", recursive=T)
list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow\\WillowOpenPathEddyCovarianceData", recursive=T)
Directories<-list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow\\WillowOpenPathEddyCovarianceData", recursive=T)
Directories[1]
Directories<-list.dirs("C:\\Felipe\\Willow Project\\Willow Experiments\\Willow Rockview\\EddyCovarianceData_Felipe\\2017\\Willow\\WillowOpenPathEddyCovarianceData", recursive=T)
str(Directories)
Directories
Directories[2]
list.files(Directories[2])
